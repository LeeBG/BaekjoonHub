# WITH RECURSIVE CTE
# AS
# (
#     SELECT ID, PARENT_ID, 1 AS DEPTH
#     FROM ECOLI_DATA
#     WHERE PARENT_ID IS NULL
#     UNION ALL
#     SELECT CHILD.ID, CHILD.PARENT_ID, CTE.DEPTH + 1
#     FROM ECOLI_DATA CHILD
#     INNER JOIN CTE
#         ON CHILD.PARENT_ID = CTE.ID
# )

# /*생성된 CTE 에 대해, 문제의 조건에 맞는 데이터를 추출하는 쿼리 부분*/
# SELECT COUNT(*) AS 'COUNT'
#     , DEPTH AS GENERATION 
# FROM CTE
# WHERE ID NOT IN (SELECT PARENT_ID FROM ECOLI_DATA WHERE PARENT_ID IS NOT NULL) -- 자식이 없는 데이터 필터링
# GROUP BY GENERATION
# ORDER BY GENERATION



WITH RECURSIVE CTE
AS
(
    SELECT ID, PARENT_ID, 1 AS DEPTH
    FROM ECOLI_DATA
    WHERE PARENT_ID IS NULL
    UNION ALL                               -- 중복 허용
    SELECT CHILD.ID, CHILD.PARENT_ID, CTE.DEPTH + 1
    FROM ECOLI_DATA CHILD
    INNER JOIN CTE
        ON CHILD.PARENT_ID = CTE.ID
)
select count(*) as COUNT, DEPTH AS GENERATION
from CTE
WHERE ID NOT IN (SELECT PARENT_ID FROM ECOLI_DATA WHERE PARENT_ID IS NOT NULL)
GROUP BY GENERATION
ORDER BY GENERATION;